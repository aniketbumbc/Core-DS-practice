{"version":3,"sources":["binarySearch.js"],"names":["Node","value","left","right","BSTree","root","newNode","current","found","tree","insert","console","log"],"mappings":";;;;;;IAAMA,OACJ,cAAYC,KAAZ,EAAmB;AAAA;;AACjB,OAAKA,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKC,KAAL,GAAa,IAAb;AACD;;IAGGC;AACJ,oBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACD,IAED;;;;;WACA,gBAAOJ,KAAP,EAAc;AACZ,UAAIK,OAAO,GAAG,IAAIN,IAAJ,CAASC,KAAT,CAAd;;AACA,UAAI,KAAKI,IAAL,KAAc,IAAlB,EAAwB;AACtB,aAAKA,IAAL,GAAYC,OAAZ;AACA,eAAO,IAAP;AACD;;AAED,UAAIC,OAAO,GAAG,KAAKF,IAAnB;;AACA,aAAO,IAAP,EAAa;AACX,YAAIJ,KAAK,KAAKM,OAAO,CAACN,KAAtB,EAA6B;AAC3B,iBAAO,IAAP;AACD;;AAED,YAAIA,KAAK,GAAGM,OAAO,CAACN,KAApB,EAA2B;AACzB,cAAIM,OAAO,CAACL,IAAR,KAAiB,IAArB,EAA2B;AACzBK,YAAAA,OAAO,CAACL,IAAR,GAAeI,OAAf;AACA,mBAAO,IAAP;AACD,WAHD,MAGO;AACLC,YAAAA,OAAO,GAAGA,OAAO,CAACL,IAAlB;AACD;AACF,SAPD,MAOO,IAAID,KAAK,GAAGM,OAAO,CAACN,KAApB,EAA2B;AAChC,cAAIM,OAAO,CAACJ,KAAR,KAAkB,IAAtB,EAA4B;AAC1BI,YAAAA,OAAO,CAACJ,KAAR,GAAgBG,OAAhB;AACA,mBAAO,IAAP;AACD,WAHD,MAGO;AACLC,YAAAA,OAAO,GAAGA,OAAO,CAACJ,KAAlB;AACD;AACF;AACF;AACF,MAED;;;;WACA,cAAKF,KAAL,EAAY;AACV,UAAI,KAAKI,IAAL,KAAc,IAAlB,EAAwB;AACtB,eAAO,KAAP;AACD;;AACD,UAAIE,OAAO,GAAG,KAAKF,IAAnB;AACA,UAAIG,KAAK,GAAG,KAAZ;;AAEA,aAAO,CAACA,KAAD,IAAUD,OAAjB,EAA0B;AACxB,YAAIN,KAAK,GAAGM,OAAO,CAACN,KAApB,EAA2B;AACzBM,UAAAA,OAAO,GAAGA,OAAO,CAACL,IAAlB;AACD,SAFD,MAEO,IAAID,KAAK,GAAGM,OAAO,CAACN,KAApB,EAA2B;AAChCM,UAAAA,OAAO,GAAGA,OAAO,CAACJ,KAAlB;AACD,SAFM,MAEA;AACLK,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AACD,aAAOD,OAAP;AACD;;;;;;AAGH,IAAIE,IAAI,GAAG,IAAIL,MAAJ,EAAX;AACAK,IAAI,CAACC,MAAL,CAAY,EAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,CAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,CAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,EAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,EAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,EAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,EAAZ;AACAD,IAAI,CAACC,MAAL,CAAY,CAAZ;AACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ","file":"binarySearch.ddd75795.js","sourceRoot":"..","sourcesContent":["class Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass BSTree {\n  constructor() {\n    this.root = null;\n  }\n\n  // insert Value\n  insert(value) {\n    let newNode = new Node(value);\n    if (this.root === null) {\n      this.root = newNode;\n      return this;\n    }\n\n    let current = this.root;\n    while (true) {\n      if (value === current.value) {\n        return null;\n      }\n\n      if (value < current.value) {\n        if (current.left === null) {\n          current.left = newNode;\n          return this;\n        } else {\n          current = current.left;\n        }\n      } else if (value > current.value) {\n        if (current.right === null) {\n          current.right = newNode;\n          return this;\n        } else {\n          current = current.right;\n        }\n      }\n    }\n  }\n\n  //find value\n  find(value) {\n    if (this.root === null) {\n      return false;\n    }\n    let current = this.root;\n    let found = false;\n\n    while (!found && current) {\n      if (value < current.value) {\n        current = current.left;\n      } else if (value > current.value) {\n        current = current.right;\n      } else {\n        found = true;\n      }\n    }\n    return current;\n  }\n}\n\nlet tree = new BSTree();\ntree.insert(10);\ntree.insert(4);\ntree.insert(2);\ntree.insert(13);\ntree.insert(11);\ntree.insert(16);\ntree.insert(20);\ntree.insert(1);\nconsole.log(tree);\n"]}