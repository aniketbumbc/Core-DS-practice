{"id":"Practice Code/test.js","dependencies":[{"name":"/Users/aniketbhavsar/Desktop/Interview prep/Type Script/Object oriented Concept /package.json","includedInParent":true,"mtime":1619938604817}],"generated":{"js":"// function getPersonName(persons) {\n//   return persons.map((person) => {\n//     person.lastname = person.lastName.toUpperCase();\n//     return person;\n//   });\n// }\n// function getPersonAdd(persons) {\n//   return persons.map((person) => {\n//     person.add = '.......';\n//     return person;\n//   });\n// }\n// const persons = [\n//   { name: 'Bart', lastName: 'Simpson', address: 'md' },\n//   { name: 'Harry', lastName: 'Potter', address: 'kd' },\n//   { name: 'Sherikc', lastName: 'Homes', address: 'uk' },\n// ];\n// const getCaptial = getPersonName(persons);\n// const cenPerson = getPersonAdd(persons);\n// console.log('getCap', getCaptial);\n// console.log('cenPer', cenPerson);\n// const harry = getCaptial.find(({ name }) => name === 'Harry');\n// console.log('harry', harry);\nfunction generateNewFolderName(existingFolders) {\n  var count = 0;\n  var name = '';\n  existingFolders.forEach(function (folderName) {\n    if (folderName !== 'New Folder') {\n      name = 'New Folder';\n    } else if (folderName === 'New Folder') {\n      count++;\n      name = \"New Folder \".concat(count);\n    }\n  });\n  return name;\n}\n\nconsole.log(generateNewFolderName(['New Folder']));"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"Practice Code/test.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"Practice Code/test.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"Practice Code/test.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"Practice Code/test.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"Practice Code/test.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"Practice Code/test.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"Practice Code/test.js","original":{"line":8,"column":0}},{"generated":{"line":8,"column":0},"source":"Practice Code/test.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"Practice Code/test.js","original":{"line":10,"column":0}},{"generated":{"line":10,"column":0},"source":"Practice Code/test.js","original":{"line":11,"column":0}},{"generated":{"line":11,"column":0},"source":"Practice Code/test.js","original":{"line":12,"column":0}},{"generated":{"line":12,"column":0},"source":"Practice Code/test.js","original":{"line":13,"column":0}},{"generated":{"line":13,"column":0},"source":"Practice Code/test.js","original":{"line":15,"column":0}},{"generated":{"line":14,"column":0},"source":"Practice Code/test.js","original":{"line":16,"column":0}},{"generated":{"line":15,"column":0},"source":"Practice Code/test.js","original":{"line":17,"column":0}},{"generated":{"line":16,"column":0},"source":"Practice Code/test.js","original":{"line":18,"column":0}},{"generated":{"line":17,"column":0},"source":"Practice Code/test.js","original":{"line":19,"column":0}},{"generated":{"line":18,"column":0},"source":"Practice Code/test.js","original":{"line":21,"column":0}},{"generated":{"line":19,"column":0},"source":"Practice Code/test.js","original":{"line":22,"column":0}},{"generated":{"line":20,"column":0},"source":"Practice Code/test.js","original":{"line":24,"column":0}},{"generated":{"line":21,"column":0},"source":"Practice Code/test.js","original":{"line":25,"column":0}},{"generated":{"line":22,"column":0},"source":"Practice Code/test.js","original":{"line":26,"column":0}},{"generated":{"line":23,"column":0},"source":"Practice Code/test.js","original":{"line":28,"column":0}},{"generated":{"line":24,"column":0},"source":"Practice Code/test.js","original":{"line":30,"column":0}},{"name":"generateNewFolderName","generated":{"line":24,"column":9},"source":"Practice Code/test.js","original":{"line":30,"column":9}},{"generated":{"line":24,"column":30},"source":"Practice Code/test.js","original":{"line":30,"column":0}},{"name":"existingFolders","generated":{"line":24,"column":31},"source":"Practice Code/test.js","original":{"line":30,"column":31}},{"generated":{"line":24,"column":46},"source":"Practice Code/test.js","original":{"line":30,"column":0}},{"generated":{"line":24,"column":48},"source":"Practice Code/test.js","original":{"line":30,"column":48}},{"generated":{"line":25,"column":0},"source":"Practice Code/test.js","original":{"line":31,"column":2}},{"name":"count","generated":{"line":25,"column":6},"source":"Practice Code/test.js","original":{"line":31,"column":6}},{"generated":{"line":25,"column":11},"source":"Practice Code/test.js","original":{"line":31,"column":11}},{"generated":{"line":25,"column":14},"source":"Practice Code/test.js","original":{"line":31,"column":14}},{"generated":{"line":25,"column":15},"source":"Practice Code/test.js","original":{"line":31,"column":2}},{"generated":{"line":26,"column":0},"source":"Practice Code/test.js","original":{"line":32,"column":2}},{"name":"name","generated":{"line":26,"column":6},"source":"Practice Code/test.js","original":{"line":32,"column":6}},{"generated":{"line":26,"column":10},"source":"Practice Code/test.js","original":{"line":32,"column":10}},{"generated":{"line":26,"column":13},"source":"Practice Code/test.js","original":{"line":32,"column":13}},{"generated":{"line":26,"column":15},"source":"Practice Code/test.js","original":{"line":32,"column":2}},{"name":"existingFolders","generated":{"line":27,"column":0},"source":"Practice Code/test.js","original":{"line":33,"column":2}},{"name":"existingFolders","generated":{"line":27,"column":2},"source":"Practice Code/test.js","original":{"line":33,"column":2}},{"generated":{"line":27,"column":17},"source":"Practice Code/test.js","original":{"line":33,"column":17}},{"name":"forEach","generated":{"line":27,"column":18},"source":"Practice Code/test.js","original":{"line":33,"column":18}},{"generated":{"line":27,"column":25},"source":"Practice Code/test.js","original":{"line":33,"column":2}},{"generated":{"line":27,"column":26},"source":"Practice Code/test.js","original":{"line":33,"column":26}},{"name":"folderName","generated":{"line":27,"column":36},"source":"Practice Code/test.js","original":{"line":33,"column":27}},{"generated":{"line":27,"column":46},"source":"Practice Code/test.js","original":{"line":33,"column":26}},{"generated":{"line":27,"column":48},"source":"Practice Code/test.js","original":{"line":33,"column":42}},{"generated":{"line":28,"column":0},"source":"Practice Code/test.js","original":{"line":34,"column":4}},{"name":"folderName","generated":{"line":28,"column":8},"source":"Practice Code/test.js","original":{"line":34,"column":8}},{"generated":{"line":28,"column":18},"source":"Practice Code/test.js","original":{"line":34,"column":18}},{"generated":{"line":28,"column":23},"source":"Practice Code/test.js","original":{"line":34,"column":23}},{"generated":{"line":28,"column":35},"source":"Practice Code/test.js","original":{"line":34,"column":4}},{"generated":{"line":28,"column":37},"source":"Practice Code/test.js","original":{"line":34,"column":37}},{"name":"name","generated":{"line":29,"column":0},"source":"Practice Code/test.js","original":{"line":35,"column":6}},{"name":"name","generated":{"line":29,"column":6},"source":"Practice Code/test.js","original":{"line":35,"column":6}},{"generated":{"line":29,"column":10},"source":"Practice Code/test.js","original":{"line":35,"column":10}},{"generated":{"line":29,"column":13},"source":"Practice Code/test.js","original":{"line":35,"column":13}},{"generated":{"line":29,"column":25},"source":"Practice Code/test.js","original":{"line":35,"column":6}},{"generated":{"line":30,"column":0},"source":"Practice Code/test.js","original":{"line":36,"column":5}},{"generated":{"line":30,"column":5},"source":"Practice Code/test.js","original":{"line":34,"column":4}},{"generated":{"line":30,"column":11},"source":"Practice Code/test.js","original":{"line":36,"column":11}},{"name":"folderName","generated":{"line":30,"column":15},"source":"Practice Code/test.js","original":{"line":36,"column":15}},{"generated":{"line":30,"column":25},"source":"Practice Code/test.js","original":{"line":36,"column":25}},{"generated":{"line":30,"column":30},"source":"Practice Code/test.js","original":{"line":36,"column":30}},{"generated":{"line":30,"column":42},"source":"Practice Code/test.js","original":{"line":36,"column":11}},{"generated":{"line":30,"column":44},"source":"Practice Code/test.js","original":{"line":36,"column":44}},{"name":"count","generated":{"line":31,"column":0},"source":"Practice Code/test.js","original":{"line":37,"column":6}},{"name":"count","generated":{"line":31,"column":6},"source":"Practice Code/test.js","original":{"line":37,"column":6}},{"generated":{"line":31,"column":11},"source":"Practice Code/test.js","original":{"line":37,"column":11}},{"name":"name","generated":{"line":32,"column":0},"source":"Practice Code/test.js","original":{"line":38,"column":6}},{"name":"name","generated":{"line":32,"column":6},"source":"Practice Code/test.js","original":{"line":38,"column":6}},{"generated":{"line":32,"column":10},"source":"Practice Code/test.js","original":{"line":38,"column":10}},{"name":"count","generated":{"line":32,"column":34},"source":"Practice Code/test.js","original":{"line":38,"column":27}},{"generated":{"line":32,"column":39},"source":"Practice Code/test.js","original":{"line":38,"column":10}},{"generated":{"line":32,"column":40},"source":"Practice Code/test.js","original":{"line":38,"column":6}},{"generated":{"line":33,"column":0},"source":"Practice Code/test.js","original":{"line":39,"column":5}},{"generated":{"line":34,"column":0},"source":"Practice Code/test.js","original":{"line":40,"column":3}},{"generated":{"line":34,"column":3},"source":"Practice Code/test.js","original":{"line":33,"column":2}},{"generated":{"line":35,"column":0},"source":"Practice Code/test.js","original":{"line":42,"column":2}},{"name":"name","generated":{"line":35,"column":9},"source":"Practice Code/test.js","original":{"line":42,"column":9}},{"generated":{"line":35,"column":13},"source":"Practice Code/test.js","original":{"line":42,"column":2}},{"generated":{"line":36,"column":0},"source":"Practice Code/test.js","original":{"line":43,"column":1}},{"name":"console","generated":{"line":38,"column":0},"source":"Practice Code/test.js","original":{"line":45,"column":0}},{"generated":{"line":38,"column":7},"source":"Practice Code/test.js","original":{"line":45,"column":7}},{"name":"log","generated":{"line":38,"column":8},"source":"Practice Code/test.js","original":{"line":45,"column":8}},{"generated":{"line":38,"column":11},"source":"Practice Code/test.js","original":{"line":45,"column":0}},{"name":"generateNewFolderName","generated":{"line":38,"column":12},"source":"Practice Code/test.js","original":{"line":45,"column":12}},{"generated":{"line":38,"column":33},"source":"Practice Code/test.js","original":{"line":45,"column":33}},{"generated":{"line":38,"column":34},"source":"Practice Code/test.js","original":{"line":45,"column":34}},{"generated":{"line":38,"column":35},"source":"Practice Code/test.js","original":{"line":45,"column":35}},{"generated":{"line":38,"column":47},"source":"Practice Code/test.js","original":{"line":45,"column":34}},{"generated":{"line":38,"column":48},"source":"Practice Code/test.js","original":{"line":45,"column":33}},{"generated":{"line":38,"column":49},"source":"Practice Code/test.js","original":{"line":45,"column":0}}],"sources":{"Practice Code/test.js":"// function getPersonName(persons) {\n//   return persons.map((person) => {\n//     person.lastname = person.lastName.toUpperCase();\n//     return person;\n//   });\n// }\n\n// function getPersonAdd(persons) {\n//   return persons.map((person) => {\n//     person.add = '.......';\n//     return person;\n//   });\n// }\n\n// const persons = [\n//   { name: 'Bart', lastName: 'Simpson', address: 'md' },\n//   { name: 'Harry', lastName: 'Potter', address: 'kd' },\n//   { name: 'Sherikc', lastName: 'Homes', address: 'uk' },\n// ];\n\n// const getCaptial = getPersonName(persons);\n// const cenPerson = getPersonAdd(persons);\n\n// console.log('getCap', getCaptial);\n// console.log('cenPer', cenPerson);\n// const harry = getCaptial.find(({ name }) => name === 'Harry');\n\n// console.log('harry', harry);\n\nfunction generateNewFolderName(existingFolders) {\n  let count = 0;\n  let name = '';\n  existingFolders.forEach((folderName) => {\n    if (folderName !== 'New Folder') {\n      name = 'New Folder';\n    } else if (folderName === 'New Folder') {\n      count++;\n      name = `New Folder ${count}`;\n    }\n  });\n\n  return name;\n}\n\nconsole.log(generateNewFolderName(['New Folder']));\n"},"lineCount":null}},"error":null,"hash":"d7cfb9f040b292e6e7203a1a0ea35163","cacheData":{"env":{}}}